// Sourcecode generated by graphql-codegen. DO NOT EDIT!
/* eslint-disable */
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'
export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K]
}
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>
}
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>
}
export type MakeEmpty<
  T extends { [key: string]: unknown },
  K extends keyof T,
> = { [_ in K]?: never }
export type Incremental<T> =
  | T
  | {
      [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never
    }
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string }
  String: { input: string; output: string }
  Boolean: { input: boolean; output: boolean }
  Int: { input: number; output: number }
  Float: { input: number; output: number }
  AWSDate: { input: any; output: any }
  AWSDateTime: { input: any; output: any }
  AWSEmail: { input: any; output: any }
  AWSIPAddress: { input: any; output: any }
  AWSJSON: { input: any; output: any }
  AWSPhone: { input: any; output: any }
  AWSTime: { input: any; output: any }
  AWSTimestamp: { input: any; output: any }
  AWSURL: { input: any; output: any }
}

export type Entitlement = {
  __typename?: 'Entitlement'
  description?: Maybe<Scalars['String']['output']>
  name: Scalars['String']['output']
  value: Scalars['Float']['output']
}

export type EntitlementConsumer = {
  __typename?: 'EntitlementConsumer'
  id: Scalars['ID']['output']
  issuer: Scalars['String']['output']
}

export type EntitlementConsumption = {
  __typename?: 'EntitlementConsumption'
  available: Scalars['Float']['output']
  consumed: Scalars['Float']['output']
  consumer?: Maybe<EntitlementConsumer>
  firstConsumedAtEpochMs?: Maybe<Scalars['Float']['output']>
  lastConsumedAtEpochMs?: Maybe<Scalars['Float']['output']>
  name: Scalars['String']['output']
  value: Scalars['Float']['output']
}

export type EntitlementsConsumption = {
  __typename?: 'EntitlementsConsumption'
  consumption: Array<EntitlementConsumption>
  entitlements: UserEntitlements
}

export type EntitlementsSet = {
  __typename?: 'EntitlementsSet'
  createdAtEpochMs: Scalars['Float']['output']
  description?: Maybe<Scalars['String']['output']>
  entitlements: Array<Entitlement>
  name: Scalars['String']['output']
  updatedAtEpochMs: Scalars['Float']['output']
  version: Scalars['Float']['output']
}

export type Mutation = {
  __typename?: 'Mutation'
  consumeBooleanEntitlements: Scalars['Boolean']['output']
  redeemEntitlements: EntitlementsSet
}

export type MutationConsumeBooleanEntitlementsArgs = {
  entitlementNames: Array<Scalars['String']['input']>
}

export type Query = {
  __typename?: 'Query'
  getEntitlements?: Maybe<EntitlementsSet>
  getEntitlementsConsumption: EntitlementsConsumption
  getExternalId: Scalars['String']['output']
}

export type UserEntitlements = {
  __typename?: 'UserEntitlements'
  entitlements: Array<Entitlement>
  entitlementsSetName?: Maybe<Scalars['String']['output']>
  version: Scalars['Float']['output']
}

export type ConsumeBooleanEntitlementsMutationVariables = Exact<{
  entitlementNames:
    | Array<Scalars['String']['input']>
    | Scalars['String']['input']
}>

export type ConsumeBooleanEntitlementsMutation = {
  __typename?: 'Mutation'
  consumeBooleanEntitlements: boolean
}

export type EntitlementFragment = {
  __typename?: 'Entitlement'
  name: string
  description?: string | null
  value: number
}

export type EntitlementConsumerFragment = {
  __typename?: 'EntitlementConsumer'
  id: string
  issuer: string
}

export type EntitlementConsumptionFragment = {
  __typename?: 'EntitlementConsumption'
  name: string
  value: number
  consumed: number
  available: number
  firstConsumedAtEpochMs?: number | null
  lastConsumedAtEpochMs?: number | null
  consumer?: {
    __typename?: 'EntitlementConsumer'
    id: string
    issuer: string
  } | null
}

export type EntitlementsConsumptionFragment = {
  __typename?: 'EntitlementsConsumption'
  entitlements: {
    __typename?: 'UserEntitlements'
    version: number
    entitlementsSetName?: string | null
    entitlements: Array<{
      __typename?: 'Entitlement'
      name: string
      description?: string | null
      value: number
    }>
  }
  consumption: Array<{
    __typename?: 'EntitlementConsumption'
    name: string
    value: number
    consumed: number
    available: number
    firstConsumedAtEpochMs?: number | null
    lastConsumedAtEpochMs?: number | null
    consumer?: {
      __typename?: 'EntitlementConsumer'
      id: string
      issuer: string
    } | null
  }>
}

export type EntitlementsSetFragment = {
  __typename?: 'EntitlementsSet'
  createdAtEpochMs: number
  updatedAtEpochMs: number
  version: number
  name: string
  description?: string | null
  entitlements: Array<{
    __typename?: 'Entitlement'
    name: string
    description?: string | null
    value: number
  }>
}

export type GetEntitlementsQueryVariables = Exact<{ [key: string]: never }>

export type GetEntitlementsQuery = {
  __typename?: 'Query'
  getEntitlements?: {
    __typename?: 'EntitlementsSet'
    createdAtEpochMs: number
    updatedAtEpochMs: number
    version: number
    name: string
    description?: string | null
    entitlements: Array<{
      __typename?: 'Entitlement'
      name: string
      description?: string | null
      value: number
    }>
  } | null
}

export type GetEntitlementsConsumptionQueryVariables = Exact<{
  [key: string]: never
}>

export type GetEntitlementsConsumptionQuery = {
  __typename?: 'Query'
  getEntitlementsConsumption: {
    __typename?: 'EntitlementsConsumption'
    entitlements: {
      __typename?: 'UserEntitlements'
      version: number
      entitlementsSetName?: string | null
      entitlements: Array<{
        __typename?: 'Entitlement'
        name: string
        description?: string | null
        value: number
      }>
    }
    consumption: Array<{
      __typename?: 'EntitlementConsumption'
      name: string
      value: number
      consumed: number
      available: number
      firstConsumedAtEpochMs?: number | null
      lastConsumedAtEpochMs?: number | null
      consumer?: {
        __typename?: 'EntitlementConsumer'
        id: string
        issuer: string
      } | null
    }>
  }
}

export type GetExternalIdQueryVariables = Exact<{ [key: string]: never }>

export type GetExternalIdQuery = { __typename?: 'Query'; getExternalId: string }

export type RedeemEntitlementsMutationVariables = Exact<{
  [key: string]: never
}>

export type RedeemEntitlementsMutation = {
  __typename?: 'Mutation'
  redeemEntitlements: {
    __typename?: 'EntitlementsSet'
    createdAtEpochMs: number
    updatedAtEpochMs: number
    version: number
    name: string
    description?: string | null
    entitlements: Array<{
      __typename?: 'Entitlement'
      name: string
      description?: string | null
      value: number
    }>
  }
}

export type UserEntitlementsFragment = {
  __typename?: 'UserEntitlements'
  version: number
  entitlementsSetName?: string | null
  entitlements: Array<{
    __typename?: 'Entitlement'
    name: string
    description?: string | null
    value: number
  }>
}

export const EntitlementFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'Entitlement' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Entitlement' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'name' } },
          { kind: 'Field', name: { kind: 'Name', value: 'description' } },
          { kind: 'Field', name: { kind: 'Name', value: 'value' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EntitlementFragment, unknown>
export const UserEntitlementsFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'UserEntitlements' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'UserEntitlements' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'entitlementsSetName' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'entitlements' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'Entitlement' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'Entitlement' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Entitlement' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'name' } },
          { kind: 'Field', name: { kind: 'Name', value: 'description' } },
          { kind: 'Field', name: { kind: 'Name', value: 'value' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<UserEntitlementsFragment, unknown>
export const EntitlementConsumerFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EntitlementConsumer' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EntitlementConsumer' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EntitlementConsumerFragment, unknown>
export const EntitlementConsumptionFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EntitlementConsumption' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EntitlementConsumption' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'name' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'consumer' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'EntitlementConsumer' },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'value' } },
          { kind: 'Field', name: { kind: 'Name', value: 'consumed' } },
          { kind: 'Field', name: { kind: 'Name', value: 'available' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'firstConsumedAtEpochMs' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'lastConsumedAtEpochMs' },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EntitlementConsumer' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EntitlementConsumer' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EntitlementConsumptionFragment, unknown>
export const EntitlementsConsumptionFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EntitlementsConsumption' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EntitlementsConsumption' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'entitlements' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'UserEntitlements' },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'consumption' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'EntitlementConsumption' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'Entitlement' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Entitlement' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'name' } },
          { kind: 'Field', name: { kind: 'Name', value: 'description' } },
          { kind: 'Field', name: { kind: 'Name', value: 'value' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EntitlementConsumer' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EntitlementConsumer' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'UserEntitlements' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'UserEntitlements' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'entitlementsSetName' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'entitlements' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'Entitlement' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EntitlementConsumption' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EntitlementConsumption' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'name' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'consumer' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'EntitlementConsumer' },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'value' } },
          { kind: 'Field', name: { kind: 'Name', value: 'consumed' } },
          { kind: 'Field', name: { kind: 'Name', value: 'available' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'firstConsumedAtEpochMs' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'lastConsumedAtEpochMs' },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EntitlementsConsumptionFragment, unknown>
export const EntitlementsSetFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EntitlementsSet' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EntitlementsSet' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'name' } },
          { kind: 'Field', name: { kind: 'Name', value: 'description' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'entitlements' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'Entitlement' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'Entitlement' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Entitlement' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'name' } },
          { kind: 'Field', name: { kind: 'Name', value: 'description' } },
          { kind: 'Field', name: { kind: 'Name', value: 'value' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EntitlementsSetFragment, unknown>
export const ConsumeBooleanEntitlementsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'ConsumeBooleanEntitlements' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'entitlementNames' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'ListType',
              type: {
                kind: 'NonNullType',
                type: {
                  kind: 'NamedType',
                  name: { kind: 'Name', value: 'String' },
                },
              },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'consumeBooleanEntitlements' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'entitlementNames' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'entitlementNames' },
                },
              },
            ],
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  ConsumeBooleanEntitlementsMutation,
  ConsumeBooleanEntitlementsMutationVariables
>
export const GetEntitlementsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetEntitlements' },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'getEntitlements' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'EntitlementsSet' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'Entitlement' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Entitlement' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'name' } },
          { kind: 'Field', name: { kind: 'Name', value: 'description' } },
          { kind: 'Field', name: { kind: 'Name', value: 'value' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EntitlementsSet' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EntitlementsSet' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'name' } },
          { kind: 'Field', name: { kind: 'Name', value: 'description' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'entitlements' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'Entitlement' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  GetEntitlementsQuery,
  GetEntitlementsQueryVariables
>
export const GetEntitlementsConsumptionDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetEntitlementsConsumption' },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'getEntitlementsConsumption' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'EntitlementsConsumption' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'Entitlement' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Entitlement' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'name' } },
          { kind: 'Field', name: { kind: 'Name', value: 'description' } },
          { kind: 'Field', name: { kind: 'Name', value: 'value' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'UserEntitlements' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'UserEntitlements' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'entitlementsSetName' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'entitlements' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'Entitlement' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EntitlementConsumer' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EntitlementConsumer' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EntitlementConsumption' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EntitlementConsumption' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'name' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'consumer' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'EntitlementConsumer' },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'value' } },
          { kind: 'Field', name: { kind: 'Name', value: 'consumed' } },
          { kind: 'Field', name: { kind: 'Name', value: 'available' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'firstConsumedAtEpochMs' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'lastConsumedAtEpochMs' },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EntitlementsConsumption' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EntitlementsConsumption' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'entitlements' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'UserEntitlements' },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'consumption' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'EntitlementConsumption' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  GetEntitlementsConsumptionQuery,
  GetEntitlementsConsumptionQueryVariables
>
export const GetExternalIdDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetExternalId' },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'getExternalId' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<GetExternalIdQuery, GetExternalIdQueryVariables>
export const RedeemEntitlementsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'RedeemEntitlements' },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'redeemEntitlements' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'EntitlementsSet' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'Entitlement' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Entitlement' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'name' } },
          { kind: 'Field', name: { kind: 'Name', value: 'description' } },
          { kind: 'Field', name: { kind: 'Name', value: 'value' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EntitlementsSet' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EntitlementsSet' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'name' } },
          { kind: 'Field', name: { kind: 'Name', value: 'description' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'entitlements' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'Entitlement' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  RedeemEntitlementsMutation,
  RedeemEntitlementsMutationVariables
>
